CREATE TABLE students (
  id INT PRIMARY KEY,
  name VARCHAR(50),
  age INT,
  marks INT,
  city VARCHAR(50)
);

INSERT INTO students VALUES
(1, 'Rahul', 20, 85, 'Delhi'),
(2, 'Priya', 19, 92, 'Mumbai'),
(3, 'Amit', 22, 76, 'Delhi'),
(4, 'Neha', 18, NULL, 'Chennai'),
(5, 'Ravi', 21, 65, 'Kolkata'),
(6, 'Simran', 20, 90, 'Mumbai');

2.Select statmesnt 
SELECT * FROM students;
SELECT name, age FROM students;
SELECT name AS student_name, marks FROM students;
WHERE STATMENT 
SELECT * FROM students WHERE age > 20;
SELECT * FROM students WHERE city = 'Delhi';
SELECT * FROM students WHERE marks IS NULL;
3.AND, OR, NOT STATEMENT 
SELECT * FROM students WHERE city='Delhi' AND age > 20;
SELECT * FROM students WHERE city='Mumbai' OR city='Delhi';
SELECT * FROM students WHERE NOT age = 18;
4.ORDER BY STATMENT
SELECT * FROM students ORDER BY age ASC;
SELECT * FROM students ORDER BY marks DESC;
SELECT * FROM students ORDER BY city, age;
5.INSERT INTO STATEMENT 
INSERT INTO students VALUES (7, 'Karan', 23, 70, 'Pune');
INSERT INTO students (id, name, city) VALUES (8, 'Meena', 'Jaipur');
INSERT INTO students (id, name, age, marks, city) VALUES (9, 'Arjun', 19, 88, 'Delhi');

6. NULL Values STATMENT 
SELECT * FROM students WHERE marks IS NULL;
SELECT * FROM students WHERE marks IS NOT NULL;
INSERT INTO students VALUES (10, 'Vikram', 20, NULL, 'Goa');
7. UPDATE
UPDATE students SET marks = 95 WHERE id = 1;
UPDATE students SET city = 'Hyderabad' WHERE name = 'Ravi';
UPDATE students SET age = age + 1 WHERE city = 'Delhi';

8. DELETE
DELETE FROM students WHERE id = 10;
DELETE FROM students WHERE marks < 70;
DELETE FROM students WHERE city = 'Kolkata';

9. LIMIT
SELECT * FROM students LIMIT 3;
SELECT * FROM students ORDER BY marks DESC LIMIT 2;
SELECT * FROM students WHERE city='Mumbai' LIMIT 1;

10. MIN and MAX
SELECT MIN(age) AS youngest FROM students;
SELECT MAX(marks) AS highest_marks FROM students;
SELECT MIN(marks), MAX(marks) FROM students WHERE city='Delhi';

11. COUNT, AVG, SUM
SELECT COUNT(*) AS total_students FROM students;
SELECT AVG(marks) AS average_marks FROM students;
SELECT SUM(marks) AS total_marks FROM students WHERE city='Mumbai';

12. LIKE
SELECT * FROM students WHERE name LIKE 'R%';
SELECT * FROM students WHERE city LIKE '%i%';
SELECT * FROM students WHERE name LIKE '__a%';

13. Wildcards
SELECT * FROM students WHERE name LIKE 'S%';
SELECT * FROM students WHERE name LIKE '%n';
SELECT * FROM students WHERE name LIKE '_e%';

14. IN
SELECT * FROM students WHERE city IN ('Delhi', 'Mumbai');
SELECT * FROM students WHERE age IN (18, 19, 20);
SELECT * FROM students WHERE id IN (1,3,5);

15. BETWEEN
SELECT * FROM students WHERE age BETWEEN 18 AND 20;
SELECT * FROM students WHERE marks BETWEEN 80 AND 95;
SELECT * FROM students WHERE id BETWEEN 2 AND 5;

16. Aliases
SELECT name AS student_name, city AS location FROM students;
SELECT AVG(marks) AS avg_score FROM students;
SELECT city, COUNT(*) AS total FROM students GROUP BY city;
17. Joins
CREATE TABLE courses (
  student_id INT,
  course VARCHAR(50)
);

INSERT INTO courses VALUES
(1, 'Math'), (2, 'Science'), (3, 'English'), (4, 'Math'), (5, 'Science');
INNER JOIN
sql
Copy code
SELECT students.name, courses.course
FROM students INNER JOIN courses
ON students.id = courses.student_id;

SELECT s.name, c.course
FROM students s INNER JOIN courses c
ON s.id = c.student_id;

SELECT s.id, s.name, c.course
FROM students s JOIN courses c
ON s.id = c.student_id;
LEFT JOIN
sql
Copy code
SELECT s.name, c.course
FROM students s LEFT JOIN courses c
ON s.id = c.student_id;

SELECT s.name, c.course
FROM students s LEFT JOIN courses c
ON s.id = c.student_id
WHERE c.course IS NULL;

SELECT s.name, c.course
FROM students s LEFT JOIN courses c
ON s.id = c.student_id
ORDER BY s.name;
RIGHT JOIN
sql
Copy code
SELECT s.name, c.course
FROM students s RIGHT JOIN courses c
ON s.id = c.student_id;

SELECT c.course, s.name
FROM courses c RIGHT JOIN students s
ON s.id = c.student_id;

SELECT s.name, c.course
FROM students s RIGHT JOIN courses c
ON s.id = c.student_id
ORDER BY c.course;
CROSS JOIN

Copy code
SELECT s.name, c.course FROM students s CROSS JOIN courses c;
SELECT * FROM students, courses;
SELECT s.id, c.course FROM students s CROSS JOIN courses c;
Self Join

Copy code
SELECT a.name AS student1, b.name AS student2
FROM students a, students b
WHERE a.city = b.city AND a.id <> b.id;

SELECT a.name, b.name
FROM students a INNER JOIN students b
ON a.city = b.city AND a.id < b.id;

SELECT a.name, b.name
FROM students a JOIN students b
ON a.age = b.age AND a.id != b.id;
